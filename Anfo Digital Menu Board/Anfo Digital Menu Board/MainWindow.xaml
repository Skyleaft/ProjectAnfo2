<metro:MetroWindow
    x:Class="Anfo_Digital_Menu_Board.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:Anfo_Digital_Menu_Board"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:viewpage="clr-namespace:Anfo_Digital_Menu_Board.Views"
    Title="MainWindow"
    Width="1280"
    Height="720"
    MinWidth="1280"
    MinHeight="720"
    Background="{DynamicResource MaterialDesignPaper}"
    BorderThickness="1"
    FontFamily="{DynamicResource MaterialDesignFont}"
    GlowBrush="{DynamicResource AccentColorBrush}"
    TextElement.FontSize="13"
    TextElement.FontWeight="Regular"
    TextElement.Foreground="{DynamicResource MaterialDesignBody}"
    TextOptions.TextFormattingMode="Ideal"
    TextOptions.TextRenderingMode="Auto"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">
    <metro:MetroWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Themes/HamburgerMenuTemplate.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--  This is the template for all option menu items.  -->
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type Controls:HamburgerMenuIconItem}">
                <Grid Height="48">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="48" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ContentControl
                        Grid.Column="0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Content="{Binding Icon}"
                        Focusable="False"
                        IsTabStop="False" />
                    <TextBlock
                        Grid.Column="1"
                        VerticalAlignment="Center"
                        FontSize="16"
                        Text="{Binding Label}" />
                </Grid>
            </DataTemplate>

            <ObjectDataProvider
                x:Key="DisplayModeEnumValues"
                MethodName="GetValues"
                ObjectType="{x:Type Controls:SplitViewDisplayMode}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Controls:SplitViewDisplayMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider
                x:Key="VisibilityEnumValues"
                MethodName="GetValues"
                ObjectType="{x:Type Visibility}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Visibility" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <Style
                x:Key="HamburgerMenuCreatorsItemStyle"
                BasedOn="{StaticResource HamburgerMenuItemStyle}"
                TargetType="{x:Type ListBoxItem}">
                <Setter Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush" Value="Transparent" />
                <Setter Property="Controls:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Controls:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource IdealForegroundDisabledBrush}" />
                <Setter Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush" Value="Transparent" />
                <Setter Property="Controls:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource IdealForegroundDisabledBrush}" />
                <Setter Property="Controls:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource GrayBrush9}" />
                <Setter Property="Controls:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource GrayBrush9}" />
                <Setter Property="Controls:ItemHelper.SelectedBackgroundBrush" Value="Transparent" />
                <Setter Property="Controls:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid Background="{TemplateBinding Background}" RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                <Border
                                    x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Grid Margin="{TemplateBinding BorderThickness}">
                                    <Grid
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Rectangle
                                            x:Name="SelectionIndicator"
                                            Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
                                            Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
                                            Fill="{TemplateBinding Foreground}"
                                            Focusable="False"
                                            Opacity="0.0" />
                                    </Grid>
                                    <materialDesign:Ripple
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        Feedback="{TemplateBinding Foreground,
                                                                   Converter={StaticResource BrushRoundConverter}}"
                                        Focusable="False"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style
                x:Key="HamburgerMenuCreatorsStyle"
                BasedOn="{StaticResource {x:Type Controls:HamburgerMenu}}"
                TargetType="{x:Type Controls:HamburgerMenu}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource HamburgerMenuCreatorsItemStyle}" />
                <Setter Property="OptionsItemContainerStyle" Value="{StaticResource HamburgerMenuCreatorsItemStyle}" />
                <Setter Property="PaneBackground" Value="{DynamicResource WhiteBrush}" />
                <Setter Property="PaneForeground" Value="{DynamicResource TextBrush}" />
                <Setter Property="ShowSelectionIndicator" Value="True" />
            </Style>

            <!--  Animasi Ganti Warna  -->
            <Storyboard x:Key="colour_change">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="animation_color" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase EasingMode="EaseIn" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="animation_color" Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    <DiscreteObjectKeyFrame KeyTime="0:0:0.343">
                        <DiscreteObjectKeyFrame.Value>
                            <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                    </DiscreteObjectKeyFrame>
                    <DiscreteObjectKeyFrame KeyTime="0:0:0.6">
                        <DiscreteObjectKeyFrame.Value>
                            <Visibility>Hidden</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                    </DiscreteObjectKeyFrame>
                </ObjectAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="animation_color" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1.4">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="animation_color" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.1">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="1.5">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="animation_color" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="animation_color" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.6" Value="0">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.4" EasingMode="EaseOut" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

        </ResourceDictionary>
    </metro:MetroWindow.Resources>


    <materialDesign:DialogHost Identifier="MainDialog" SnackbarMessageQueue="{Binding ElementName=MainSnackbar, Path=MessageQueue}">

        <Grid>

            <metro:HamburgerMenu
                x:Name="HamburgerMenuControl"
                HamburgerWidth="48"
                IsPaneOpen="True"
                ItemInvoked="HamburgerMenuControl_ItemInvoked"
                ItemTemplate="{StaticResource MenuItemTemplate}"
                OptionsItemClick="HamburgerMenu_OnOptionsItemClick"
                OptionsItemTemplate="{StaticResource MenuItemTemplate}"
                SelectedIndex="0"
                Style="{StaticResource HamburgerMenuCreatorsStyle}"
                VerticalScrollBarOnLeftSide="False">
                <!--  Items  -->
                <metro:HamburgerMenu.ItemsSource>
                    <metro:HamburgerMenuItemCollection>
                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Home}" Label="Home">
                            <metro:HamburgerMenuIconItem.Tag>
                                <viewpage:MenuPage />
                            </metro:HamburgerMenuIconItem.Tag>
                        </metro:HamburgerMenuIconItem>

                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Food}" Label="Data Produk">
                            <metro:HamburgerMenuIconItem.Tag>
                                <viewpage:PageProduk />
                            </metro:HamburgerMenuIconItem.Tag>
                        </metro:HamburgerMenuIconItem>

                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Modern Kind=BookList}" Label="Data Katalog">
                            <metro:HamburgerMenuIconItem.Tag>
                                <viewpage:PageKatalog />
                            </metro:HamburgerMenuIconItem.Tag>
                        </metro:HamburgerMenuIconItem>

                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Message}" Label="Data Pesan">
                            <metro:HamburgerMenuIconItem.Tag>
                                <viewpage:PageMessage />
                            </metro:HamburgerMenuIconItem.Tag>
                        </metro:HamburgerMenuIconItem>

                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Modern Kind=ProjectorScreen}" Label="Tampilkan">
                            <metro:HamburgerMenuIconItem.Tag>
                                <viewpage:PageFrontend />
                            </metro:HamburgerMenuIconItem.Tag>
                        </metro:HamburgerMenuIconItem>

                    </metro:HamburgerMenuItemCollection>
                </metro:HamburgerMenu.ItemsSource>

                <!--  Options  -->
                <metro:HamburgerMenu.OptionsItemsSource>
                    <metro:HamburgerMenuItemCollection>
                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Settings}" Label="Pengaturan">
                            <metro:HamburgerMenuIconItem.Tag>
                                <viewpage:PageSetting />
                            </metro:HamburgerMenuIconItem.Tag>
                        </metro:HamburgerMenuIconItem>

                        <metro:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Logout}" Label="Logout" />


                    </metro:HamburgerMenuItemCollection>
                </metro:HamburgerMenu.OptionsItemsSource>

                <!--  Content  -->
                <metro:HamburgerMenu.ContentTemplate>
                    <DataTemplate DataType="{x:Type Controls:HamburgerMenuIconItem}">
                        <Grid
                            x:Name="ContentGrid"
                            Margin="0"
                            Background="{DynamicResource MaterialDesignPaper}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <TextBlock
                                Grid.Row="0"
                                Margin="20,15,0,5"
                                Padding="0"
                                FontFamily="{DynamicResource HeaderFontFamily}"
                                FontSize="{DynamicResource HeaderFontSize}"
                                Text="{Binding Label}" />
                            <metro:TransitioningContentControl
                                Grid.Row="1"
                                Content="{Binding Tag}"
                                Focusable="False"
                                RestartTransitionOnContentChange="True"
                                Transition="LeftReplace" />


                        </Grid>
                    </DataTemplate>
                </metro:HamburgerMenu.ContentTemplate>

            </metro:HamburgerMenu>

            <Ellipse
                x:Name="animation_color"
                Fill="{DynamicResource AccentColorBrush}"
                RenderTransformOrigin="0.5,0.5"
                StrokeDashCap="Square"
                Visibility="Hidden">
                <Ellipse.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform />
                        <TranslateTransform />
                    </TransformGroup>
                </Ellipse.RenderTransform>
            </Ellipse>

        </Grid>
    </materialDesign:DialogHost>
</metro:MetroWindow>
